{"version":"0.2.0","body":"// ======================== Settings ======================================================\nlet topBannerColor = \"073763\";\nlet leftColor = \"cfe2f3\";\nlet middleColor = \"fce5cd\";\nlet rightColor = \"d9ead3\";\nlet leftColWidth = 326.25;\nlet rightColWidth = 250;\n\n\n// ======================== Enum dayNames =================================================\n\nenum dayNames {\n  Monday = 0,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n  Sunday\n}\n\nlet daysOpen = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n// ======================== Class Time ====================================================\n// Stores the time of day in seconds and provides some simple methods for working between\n// string and number representations\n// Requirements: None \nclass Time {\n  // constants\n  static readonly SECS_IN_DAY = 86400;\n\n  // attributes \n  private value: number;\n\n  // ----------- constructor --------------\n  constructor(newVal: number) {\n      // value must corispond to a 24 hour clock. value under -1 or over 86400 is invalid \n      if (!this.setValue(newVal)) {\n          this.value = -1;\n      }\n  }\n\n  // ----------- mutators -----------------\n  // sets a new value for the time object. NewVal should be in seconds\n  // returns boolean indicator as to wether or not newVal is a valid time\n  setValue(newVal: number): boolean { // only change value if valid on a 24 hour clock\n      if (newVal >= 0 && newVal < Time.SECS_IN_DAY) { // 86400 seconds per day\n          this.value = newVal;\n          return true;\n      }\n      return false;\n  }\n\n  // Sets time object value using a 24 hour clock\n  // returns boolean indicator wether or not arguments are a valid time\n  setFrom24(hour : number,minute : number,second : number){\n    let time = 0; \n\n    // validate parameter values before continuing\n    if(hour  >= 0 && hour < 24 && minute >= 0 && minute < 60 && second >= 0 && second < 60){\n      time += hour * 3600 + minute * 60 + second;\n      return this.setValue(time);\n    }\n\n    return false;\n  }\n\n\n  // Sets time object value using a 12 hour clock\n  // returns boolean indicator wether or not arguments are a valid time\n  setFrom12(hour : number, minute : number, second : number, amOrPm : string){\n    // ensure parameters contain valid values\n    if (hour > 12 || hour < 1 || minute > 59 || minute < 0 || second > 59 || minute < 0 ||!(amOrPm.toLowerCase().includes(\"am\") || amOrPm.toLowerCase().includes(\"pm\"))){\n      return false;\n    }\n\n    // adjust the hour based on what time of day it is. Midnight == 0 hour, afternoons\n    // require 12 hours to be added to clock \n    if(amOrPm.toLowerCase().includes(\"am\") && hour == 12){\n      hour = 0; \n    } \n    else if (amOrPm.toLowerCase().includes(\"pm\") && hour != 12) {\n      hour += 12;\n    }\n\n    // time is now in 24 hour format and can be assigned by setFrom24() \n    return this.setFrom24(hour,minute,second);\n  }\n\n\n  // --------- Accessors -----------------\n  // get time returns the raw second value of the time object\n  getValue(){\n    return this.value;\n  }\n\n  // gets the 24 based hour of the day\n  getHour24(){\n    return Math.floor(this.value/3600);\n  }\n\n  // gets the 12 based hour of the day\n  getHour12(){\n    let hour = this.getHour24();\n    if(hour > 12){ // convert from 24 hour base to 12 hour base \n      hour -= 12;\n    } else if (hour == 0){// convert midnight (0) to midnight (12)\n      hour = 12;\n    }\n    return hour;\n  }\n\n  // gets the shortest meaningful string representation of the time object in 12 hour format\n  toMicro12Str(){\n    let str = this.getHour12().toString();\n    if(this.getMinute()>0){\n      str += \":\";\n      if(this.getMinute()<10){\n        str+=\"0\";\n      }\n      str+=this.getMinute();\n    }\n    return str;\n  }\n\n  // gets the minute in the current hour\n  getMinute(){\n    let seconds = this.value % 3600; // get the number of seconds from current value\n    return Math.floor(seconds / 60); // convert seconds to whole minutes\n  }\n\n  // gets the second in the second in the current minute\n  getSecond(){\n    return this.value % 60;\n  }\n\n  // gets the maridian designator for 12 hour style timing\n  getMaridian(){\n    if(this.getValue() >= 43200){\n      return \"pm\";\n    }\n    return \"am\"; \n  }\n}\n\n\n// ======================== Class LAShift =============================================\n// class represents a single contiguous shift for a learning assistant, with a start time and stop time\nclass Shift { \n  private startTime : Time;\n  private stopTime :  Time;\n\n  constructor(startTime : Time, stopTime : Time){\n    this.startTime = startTime;\n    this.stopTime = stopTime;\n  }\n\n  // takes a time object and determines if the time occurs during the shift\n  isActive(time : Time){\n    if(this.startTime.getValue() <= time.getValue() && time.getValue() < this.stopTime.getValue()){\n      return true;\n    }\n    return false; \n  }\n\n  toString(){\n    return this.startTime.getHour24() + \":\" + this.startTime.getMinute() + \":\" + this.startTime.getSecond() +\n      \"-\" + this.stopTime.getHour24() + \":\" + this.stopTime.getMinute() + \":\" + this.stopTime.getSecond();\n  }\n\n  toMicro12Str(){\n    return this.startTime.toMicro12Str() + \"-\" + this.stopTime.toMicro12Str();\n  }\n}\n\n// class is a grouping of shifts categorized by day\nclass DaySchedule {\n  private dayName: String;\n  private shifts: Shift[];\n\n  constructor(dayName: String, shifts: Shift[]) {\n    this.dayName = dayName;\n    this.shifts = [];\n    if(shifts != undefined){\n      for(let i = 0; i < shifts.length; i++){\n        this.shifts.push(shifts[i]);\n      }\n    }\n  }\n\n  addShift(shift: Shift) {\n    this.shifts.push(shift);\n  }\n\n  getDayName() {\n    return this.dayName;\n  }\n\n  setDayName(dayName: string) {\n    this.dayName = dayName;\n  }\n\n  isActive(time : Time){\n    for(let i = 0; i < this.shifts.length; i++){\n      if(this.shifts[i].isActive(time)){\n        return true;\n      }\n    }\n    return false;\n  }\n\n  getShifts(){\n    return this.shifts;\n  }\n\n  toString(){\n    let str : string = \"\";\n    for(let i = 0; i < this.shifts.length; i++){\n      str+=this.shifts[i].toString() + \"\\n\";\n    }\n    return str;\n  }\n}\n \n\n\n\n// ======================== Class LASchedule =============================================\n// Represents a learning assistants weekly schedule \nclass WeekSchedule{\n  public static readonly dayNames = dayNames;\n  private days : DaySchedule[];\n\n  constructor(days : DaySchedule[]){\n    this.days = days;\n  }\n\n  // searches for a daySchedule object by name and returns it. Returns undefined if day is not found\n  getDayByName(dayName : string){\n    let dayIdx = -1; \n    // search the day name within days array\n    for(let i = 0; i<this.days.length; i++){\n      if(this.days[i].getDayName().toLowerCase().includes(dayName.toLowerCase())){\n        return this.days[i];\n      }\n    }\n    return undefined;\n  }\n\n  // searches for a daySchedule object by index number and returns it. Returns undefined if out of bounds\n  getDayByIdx(dayNum : number){\n    if(dayNum >= 0 && dayNum < this.days.length){\n      return this.days[dayNum];\n    }\n    return undefined; \n  }\n\n  //---------------------------------getters-----------------------------------------------\n  // uses a day and a time object to identify if a shift is active\n  isActive(day : string, time : Time){\n    if(this.getDayByName(day)!= undefined){\n      return this.getDayByName(day).isActive(time);\n    }\n    return false; \n  }\n\n  toString(){\n    let str : string = \"\";\n    for(let i = 0; i < this.days.length; i++){\n      str += this.days[i].getDayName() + \"\\n\" + this.days[i].toString();\n    }\n    return str;\n  }\n}\n\nclass Staff{\n  name : string;\n  schedule : WeekSchedule; \n\n  constructor(name : string, schedule : WeekSchedule){\n    this.name = name;\n    this.schedule = schedule;\n  }\n\n  isActive(day : string, time : Time){\n    return this.schedule.isActive(day, time);\n  }\n\n  toString(){\n    return this.name + \"\\n\" + this.schedule.toString();\n  }\n}\n\nclass Course{\n  name : string;\n  bookingsLink : string; \n  assistants : Staff[];\n\n  constructor(name : string, assistants : Staff[] = undefined, link : string = undefined){\n    this.name = name;\n    this.assistants = [];\n    if(assistants != undefined){\n      this.assistants = assistants;\n    }\n    if(link != undefined){\n      this.bookingsLink = link; \n    }\n  }\n\n  addAssistant(assistant : Staff){\n    if(assistant != undefined){\n      this.assistants.push(assistant);\n    }\n  }\n\n  coveredByStrs(){\n    let strs : string[] = [];\n    for(let i = 0; i < this.assistants.length; i++){\n      strs.push(this.assistants[i].name);\n    }\n    return strs; \n  }\n\n  hasCoverage(day : string = undefined, time : Time = undefined) : boolean {\n    // function treats omitted arguments as a general request for coverage\n    if(day == undefined || time == undefined){\n      if(this.assistants.length > 0){\n        return  true;\n      }\n    }\n    // if a day and time were specified, function returns coverage status for that date and time\n    else {\n      for(let i = 0; i < this.assistants.length; i++){\n        if(this.assistants[i].isActive(day, time)){\n          return true;\n        } \n      }\n    }\n\n    return false; \n  }\n\n  getDayCoverage(day : string){\n    let shifts : Shift[] = [];\n    let startTime = -1;\n  \n    for (let time = 0; time < 86400; time+=60){\n      if(this.hasCoverage(day, new Time(time))){\n        if(startTime == -1){\n          startTime = time;\n        }\n      } else if (startTime != -1){\n        shifts.push(new Shift(new Time(startTime), new Time(time)));\n        startTime = -1;\n      }\n    }\n    return new DaySchedule(day, shifts);\n  }\n  \n  getWeekCoverage(){\n    let days = [\"Monday\", \"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"];\n    let week : DaySchedule[] = [];\n    for(let day in days){\n      week.push(this.getDayCoverage(days[day]));\n    }\n    return new WeekSchedule(week);\n  }\n\n  xlBookingsHyperlink() : string {\n    let nameWords = this.name.split(\" \");\n    return '=HYPERLINK(\"'+this.bookingsLink +'\",\"Book Remote Session For ' + nameWords[0] + \" \" + nameWords[1] +'\")';\n  }\n\n  setBookingsLink(link : string){\n    this.bookingsLink = link;\n  }\n \n  toString() : string {\n    let str = this.name + \"\\n\";\n    for(let i = 0; i < this.assistants.length; i++){\n      str += this.assistants[i].toString();\n    }\n    return str;\n  }\n}\n\n//============== function to build learning assistant from schedule workbook ===================\nfunction buildLAFromLCWorkbook(daysOpen : string[], scheduleSheetLine : string[]){\n  let name = scheduleSheetLine[0].trim();\n  let scheduleStrs = scheduleSheetLine.slice(1);\n  let schedule : DaySchedule[] = [];\n \n  // create a week schedule from the schedule sheet\n  for(let dayNum = 0; dayNum < daysOpen.length; dayNum++){\n    if (scheduleStrs[dayNum] != undefined && scheduleStrs[dayNum] != \"\"){\n      schedule.push(new DaySchedule(daysOpen[dayNum],getLCDayShifts(scheduleStrs[dayNum])));\n    }\n  }\n  return new Staff(name, new WeekSchedule(schedule));\n}\n\n// given a learning center style string notation of shifts, converts in to shift objects and returns\nfunction getLCDayShifts(value : string){\n  let shifts : Shift[] = [];\n  let values = value.split(\";\");\n  for(let i = 0; i < values.length; i++){\n    if(values[i].includes(\"-\")){\n\n      shifts.push(new Shift(setFromLCShortStr(values[i].split(\"-\")[0]), \n      setFromLCShortStr(values[i].split(\"-\")[1])));\n    }\n  }\n\n  return shifts;\n}\n\nfunction setFromLCShortStr(value : string){\n  // variable \n  let hour = 0;\n  let minute = 0;\n  let second = 0; // schedule never contains second data, used for argument resolution \n\n  // assign hour information  \n  hour = parseInt(value.split(\":\")[0]);\n\n  // determine if string contains minute information \n  // and assign values appropriately  \n  if (value.includes(\":\")) {\n    minute = parseInt(value.split(\":\")[1]);\n  }\n\n  // LC short notation assumes that any hour value before 8 (when the LC opens) is in the afternoon \n  if (hour < 8) {\n    hour += 12;\n  }\n\n  // time is now in 24 hour format, parent funcion can set value \n  let time = new Time(0);\n  time.setFrom24(hour, minute, second);\n  return time;\n} \n\n\nfunction buildLearningAssistantsFromWorkbook(schedule : ExcelScript.Worksheet){\n  let scheduleSheetStart = 3; \n  let transposeSheetStart = 1;\n  let scheduleInStrs = schedule.getUsedRange().getTexts().slice(scheduleSheetStart);\n  let days = scheduleInStrs[0].slice(1);\n  scheduleInStrs = scheduleInStrs.slice(1);\n  let learningAssistants : Staff[] = [];\n  for(let i = 0; i < scheduleInStrs.length; i++){\n    learningAssistants.push(buildLAFromLCWorkbook(days, scheduleInStrs[i]));\n  }  \n  return learningAssistants;\n}\n\nfunction buildCourses(transposeSheet : ExcelScript.Worksheet, assistants : Staff[], links : xlTable[]){\n  let courseNamesStartRow = 0;\n  let courseNamesStartCol = 1;\n  let assistStartRow = 1;\n  let assistNameCol = 0;\n  let transposeTexts = transposeSheet.getUsedRange().getTexts();\n  let courseNames = transposeTexts[courseNamesStartRow].slice(courseNamesStartCol);\n\n  let courses : Course[] = [];\n  for(let i = 0; i < courseNames.length; i++){\n    if(courseNames[i] != \"\"){\n      courses.push(new Course(courseNames[i]));\n      // match assistants to their covered courses \n      if(assistants != undefined){\n        matchCoverage(assistants, courses[courses.length - 1], transposeTexts);\n      }\n      // match booking links to their course\n      for(let j = 0; j < links.length; j++){\n        if(links[j].getRecord(courses[courses.length - 1].name) != undefined){\n          courses[courses.length - 1].setBookingsLink(links[j].getRecord(courses[courses.length - 1].name)[1]);\n        }\n      }\n    }\n  }\n  return courses;\n}\n\nfunction matchCoverage(assistants : Staff[], course : Course, transpose : string[][]){\n  // variables\n  let assistantIdx: number = undefined;\n  // find course col in transpose sheet. If course can not be found, return\n  let courseColIdx = findColIdx(transpose, course.name);\n  if(courseColIdx == undefined){\n    return; \n  }\n\n  // step through possible assistants\n  for(let i = 0; i < assistants.length; i++){\n    // find where the current assistant is in transpose sheet\n    assistantIdx = findRowIdx(transpose, assistants[i].name);\n    if(assistantIdx != undefined){ // guard against errors \n      // check the assistants coverage and add\n      if(transpose[assistantIdx][courseColIdx].toLowerCase().includes('x')){\n        course.addAssistant(assistants[i]);\n      }\n    }\n  }\n}\n\nfunction findColIdx(arry : string[][], search : string){\n  for(let i = 0; i < arry.length; i++){\n    for(let j = 0; j < arry[i].length; j++){\n      if(arry[i][j].includes(search)){\n        return j; \n      }\n    }\n  }\n  return undefined; \n}\n\nfunction findRowIdx(arry: string[][], search: string) {\n  for (let i = 0; i < arry.length; i++) {\n    for (let j = 0; j < arry[i].length; j++) {\n      if (arry[i][j].includes(search)) {\n        return i;\n      }\n    }\n  }\n  return undefined; \n}\n\nclass OwlnetSchedule {\n\n  static courseRow(course : Course, days : string[] = daysOpen){\n    let coverage = course.getWeekCoverage();\n    let row : string[] = [];\n    row.push(course.name);\n    for(let i = 0; i < days.length; i++){\n      if(coverage.getDayByName(days[i]) != undefined){\n        let tempStr = \"\";\n        for (let shifts = 0; shifts < coverage.getDayByName(days[i]).getShifts().length; shifts++){\n          if(shifts > 0){\n            tempStr += \"; \";\n          }\n          tempStr += coverage.getDayByName(days[i]).getShifts()[shifts].toMicro12Str();\n        }\n        row.push(tempStr);\n      }\n    }\n    // add bookings hyperlink\n    row.push(course.xlBookingsHyperlink());\n    return row; \n  }\n\n  // adds exception courses that we want displayed on the owlnet schedule sheet\n  // that do not exist in the transpose sheet\n  static transposeOmissions(courses : Course[], links : xlTable[]){\n    let tempCourse : Course = undefined;\n\n    // find english 101 and copy for english courses not defined in transpose\n    for(let i = 0; i < courses.length; i++){\n      if (courses[i].name.toLowerCase() == \"ENG 101 English Composition\".toLowerCase()){\n        tempCourse = courses[i];\n        break;\n      }\n    }\n\n    if(tempCourse != undefined){\n      // writing assistance (any course) uses learning assistants from english 101\n      courses.push(new Course(\"Writing Assistance (Any course)\",tempCourse.assistants));\n\n      // Accuplacer Reading - College Placement Preparation uses learning assistants from english 101\n      courses.push(new Course(\"Accuplacer Reading - College Placement Preparation\", tempCourse.assistants));\n\n      // ABE/Pre-GED/GED English uses learning assistants from English 101\n      courses.push(new Course(\"ABE/Pre-GED/GED English\", tempCourse.assistants));\n    }\n\n    // find tranisitional math courses and copy for math courses not in transpose\n    tempCourse = undefined;\n    for (let i = 0; i < courses.length; i++) {\n      if (courses[i].name.toLowerCase() == \"MATH 003-026 Transitional Math courses (Pre-Algebra and Algebra)\".toLowerCase()) {\n        tempCourse = courses[i];\n        break;\n      }\n\n\n    }  \n    if(tempCourse != undefined){\n      // Accuplacer Math - College Placement Preparation\n      courses.push(new Course(\"Accuplacer Math - College Placement Preparation\", tempCourse.assistants));\n\n      // ABE/Pre-GED/GED Math\n      courses.push(new Course(\"ABE/Pre-GED/GED Math\",tempCourse.assistants));\n    }  \n  }\n\n  // adds microsoft bookings links to courses from \"owlnet course groups\" to each course\n  static assignBookingsLinks(courses : Course[], links : xlTable[]){\n    for (let i = 0; i < courses.length; i++) {\n      for (let j = 0; j < links.length; j++) {\n        if (links[j].getRecord(courses[i].name) != undefined) {\n          courses[i].setBookingsLink(links[j].getRecord(courses[i].name)[1]);\n        }\n      }\n    }\n  }\n\n  // --- Primary Output Function ---\n  // Produes a 2d string array representing the final values for the owlnet schedule worksheet\n  // courses are grouped by 2d string array \n  static output(courses : Course[], order : xlTable[]) : string[][]{\n    // intalize variables\n    let outputArray : string[][] = [];\n    let groupHeader : string[];\n   \n    // for each group in order\n    for (let groupNum = 0; groupNum < order.length; groupNum++){\n      // add space for later header construction \n      outputArray.push([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n      \n      // push group name header content first\n      groupHeader = [order[groupNum].headings[0]];\n      groupHeader = groupHeader.concat(daysOpen);\n      outputArray.push(groupHeader);\n      outputArray[outputArray.length - 1].push(\"Click on link for availability\");\n      \n      // step through all of the courses in the group \n      for (let courseInGroup = 0; courseInGroup < order[groupNum].body.length; courseInGroup++){\n        \n        // find the currently specified course from the group list in the array of all courses  \n        for(let courseNum = 0; courseNum < courses.length; courseNum++){\n          if(courses[courseNum].name.toLowerCase() == order[groupNum].body[courseInGroup][0].toLowerCase()){\n\n            // only add the course if it has coverage sometime this week\n            if(courses[courseNum].hasCoverage()){\n              // add the found course details to the output values array and brea \n              outputArray.push(this.courseRow(courses[courseNum]));\n              break;\n            }\n          }\n        } \n      }\n    }\n    return outputArray;\n  }\n}\n\nclass WorksheetExtS {\n  sheet: string[][];\n  private tables: string[][][];\n\n  constructor(xlSheet : string[][]) {\n    if (xlSheet != undefined) {\n      this.sheet = xlSheet;\n    } else {\n      return undefined;\n    }\n  }\n\n  getTable(idx : number){\n    if(this.tables.length > idx){\n      return this.tables[idx];\n    }\n    return undefined;\n  }\n\n  getTableCount(){\n    return this.tables.length; \n  }\n\n// returns true if sheet cotains at least one exact cell containing findMe\n  contains(findMe : string) : boolean{\n    return !(this.rowOf(findMe)==undefined);\n  }\n// searches findMe and returns its zero based row index. returns Undefined if not found\n// findMe : exact string to search for // itr : instance of findme that should be searched\n  rowOf(findMe : string, itr : number = 0) : number {\n    for(let row = 0; row < this.sheet.length; row++){\n      for(let col = 0; col < this.sheet[row].length; col++){\n        if(itr == 0 && this.sheet[row][col] == findMe){\n          return row;\n        }\n      }\n    }\n    return undefined;\n  }\n// searches findMe and returns its zero based column index. Returns undefined if notfound\n// findMe : exact string to search for // itr : instance of find me that should be searched\n  colOf(findMe: string, itr: number = 0) : number {\n    for (let row = 0; row < this.sheet.length; row++) {\n      for (let col = 0; col < this.sheet[row].length; col++) {\n        if (itr == 0 && this.sheet[row][col] == findMe) {\n          return col;\n        }\n      }\n    }\n    return undefined;\n  }\n// returns the given row number as a string array, undefined if row out of bounds\n// rowIdx : zero based index of row\n  getRow(rowIdx : number) : string[]{\n    if(rowIdx >= 0 && rowIdx < this.sheet.length){\n      return this.sheet[rowIdx];\n    }\n    return undefined;\n  }\n// return the row containing key as string array, undefined if key not found\n// key : string to search\n  rowContaining(key : string) : string[] {\n    let rowIdx = this.rowOf(key);\n    if(rowIdx != undefined){\n      return this.getRow(rowIdx);\n    }\n    return undefined;\n  }\n// returns the column at the specified index, undefined if not found. Missing rows filled in by \"\"\n// colIdx : zero based index of desired column\n  getCol(colIdx : number){\n    let rtrnStrs: string[] = [];\n    let contentFound = false;\n\n    if(colIdx < 0){return undefined;}\n\n    for (let row = 0; row < this.sheet.length; row++) {\n      if (this.sheet[row].length > colIdx) {\n        rtrnStrs.push(this.sheet[row][colIdx]);\n        contentFound = true;\n      } else {\n        rtrnStrs.push(\"\");\n      }\n    }\n    \n    if(contentFound){return rtrnStrs;}\n    \n    return undefined;\n  }\n// return the column containing key as string array, undefined if key not found\n// key : string to search\n  colContaining(key : string) : string[] {\n    let colIdx = this.colOf(key);\n    return this.getCol(colIdx);\n  }\n}\n\n\nclass xlTable{\n  headings : string[];\n  body : string[][];\n  keyCol : number;\n  \n  constructor(headings : string[], body:string[][], keyCol : number = 0){\n    this.headings = [];\n    if(headings != undefined){\n      for(let i = 0; i < headings.length; i++){\n        this.headings.push(headings[i]);\n      }\n    }\n\n    this.body = [];\n    if (body != undefined) {\n      for (let i = 0; i < body.length; i++) {\n        this.body.push(body[i]);\n      }\n    }\n\n    this.keyCol = 0;\n    this.setKeyCol(keyCol);\n  }\n\n  getKeyCol() : number{\n    return this.keyCol;\n  }\n\n  setKeyCol(keyCol : number){\n    if(keyCol >= 0){\n      this.keyCol = keyCol;\n    }\n  }\n\n  getRecord(key : string) : string[] {\n    for(let i = 0; i < this.body.length; i++){\n      if(key == this.body[i][this.keyCol]){\n        return this.body[i];\n      }\n    }\n    return undefined; \n  }\n\n  toString() : string{\n    let tempStr = \"\";\n    for(let i = 0; i < this.headings.length; i++){\n      tempStr += this.headings[i] + \" \";\n    }\n    for(let i = 0; i < this.body.length;i++){\n      tempStr += \"\\n\"\n      for(let j = 0; j < this.body[i].length; j++){\n        tempStr += this.body[i][j].padEnd(this.headings[j].length) + \" \";\n      }\n    }\n    return tempStr;\n  }\n}\n\nfunction makeXlTable(table : ExcelScript.Table, keyCol : number = 0) : xlTable{\n  let texts = table.getRange().getTexts();\n  let tempHeadings : string[] = texts[0];\n  let tempBody : string[][] = [];\n\n  for(let i = 1; i < texts.length; i++){\n    tempBody.push(texts[i]);\n  }\n    return new xlTable(tempHeadings, tempBody ,keyCol);\n}\n\nfunction makeXlTables(tables : ExcelScript.Table[], keyCols : number[] = undefined) : xlTable[]{\n  let keys : number[] = [];\n  if(keyCols != undefined){\n    if(keyCols.length != tables.length){\n      console.log(\"makeXLTables: keyCol array length does not match the number of tables passed.\");\n      for (let i = 0; i < tables.length; i++) {\n        keys.push(0);\n      }\n    } else {\n      keys = keyCols;\n    }\n  } else {\n    for (let i = 0; i < tables.length; i++) {\n      keys.push(0);\n    }\n  }\n\n  let xlTables : xlTable[] = [];\n  for(let i = 0; i < tables.length; i++){\n    xlTables.push(makeXlTable(tables[i],keys[i]));\n  }\n\n  return xlTables;\n}\n\n// produces a spreadsheet according to \"sheet\", running layout, styling, format functions on it\n// places it at specified location \nfunction output(content: string[][], targetSheetName: string, targetBook: ExcelScript.Workbook) : ExcelScript.Worksheet {\n  // if the sheet already exists, delete it to clear existing data\n  if (targetBook.getWorksheet(targetSheetName) != undefined) {\n    targetBook.getWorksheet(targetSheetName).delete();\n  }\n\n  // create the output worksheet\n  let targetSheet = targetBook.addWorksheet(targetSheetName);\n\n  // set sheet data types\n  format(targetSheet);\n\n  // add data to sheet\n  targetSheet.getRangeByIndexes(0, 0, content.length, content[0].length).setValues(content);\n\n  // find listed courses that don't have scheduled assistants this week but still indicate coverage\n  let unscheduled = findUnscheduled(content);\n\n  for(let i = 0; i < unscheduled.length; i++){\n    targetSheet.getRangeByIndexes(unscheduled[i], 1, 1, daysOpen.length).merge();\n    targetSheet.getRangeByIndexes(unscheduled[i], 1, 1, 1).setValue(\"Please Check Back Next Week!\");\n  }\n\n  // find areas between courses\n  let btwnCourse = findGaps(content);\n\n  // add between course headers\n  for (let i = 0; i < btwnCourse.length; i++) {\n    targetSheet.getRangeByIndexes(btwnCourse[i], 1, 1, 1).setValue(\"On Campus Walk-In Hours\");\n    targetSheet.getRangeByIndexes(btwnCourse[i], 7, 1, 1).setValue(\"Remote Session Links\");\n  }\n\n  // add layout and styling information\n  layout(targetSheet, btwnCourse);\n  styling(targetSheet, btwnCourse);\n\n  // add header to worksheet\n  addHeader(targetSheet);\n\n  // add borders\n  addAllBorders(targetSheet.getUsedRange());\n\n  return targetSheet;\n}\n\n// provides layout settings for output spreadhseet\nfunction layout(worksheet : ExcelScript.Worksheet, breaks : number[]){\n  // use pointer to prevent unecessary worksheet calls \n  let tgtFormat : ExcelScript.RangeFormat;\n\n  // layout settings for left side column (course names)\n  tgtFormat = worksheet.getRange(\"A:A\").getFormat();\n  tgtFormat.setColumnWidth(leftColWidth);\n  tgtFormat.setVerticalAlignment(ExcelScript.VerticalAlignment.center);\n\n  // layout settings for right side column (bookings links)\n  tgtFormat =  worksheet.getRange(\"H:H\").getFormat();\n  tgtFormat.setColumnWidth(rightColWidth);\n  tgtFormat.setVerticalAlignment(ExcelScript.VerticalAlignment.center);\n\n  // center and adjust width/height of day columns to ensure numbers show correctly\n  tgtFormat = worksheet.getRange(\"B:G\").getFormat();\n  tgtFormat.setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);\n  tgtFormat.setVerticalAlignment(ExcelScript.VerticalAlignment.center);\n  tgtFormat.setColumnWidth(100);\n  tgtFormat.setWrapText(true);\n  tgtFormat.autofitRows();\n\n  // merge cells at course breaks \n  for(let i = 0; i < breaks.length; i++){\n    let moveVal = worksheet.getRangeByIndexes(breaks[i]+1,0,1,1).getText();\n    worksheet.getRangeByIndexes(breaks[i],0,2,1).merge();\n    worksheet.getRangeByIndexes(breaks[i], 0, 1, 1).setValue(moveVal);\n    worksheet.getRangeByIndexes(breaks[i],1,1,6).merge();\n  }\n}\n\n// provides styling settings for output spreadsheet\nfunction styling(worksheet : ExcelScript.Worksheet, breaks : number[]){\n  // prevent uncessary calls to sheet by getting a RangeFormat object for each group of changes\n  let tgtFmt : ExcelScript.RangeFormat;\n  \n  for(let i = 0; i < breaks.length; i++){\n    // styling for course name cell\n    tgtFmt = worksheet.getRangeByIndexes(breaks[i], 0, 1, 1).getFormat();\n    tgtFmt.getFill().setColor(\"c9daf8\");\n    tgtFmt.getFont().setBold(true);\n    tgtFmt.getFont().setSize(18);\n    tgtFmt.getFont().setName(\"Times New Roman\");\n    tgtFmt.setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);\n\n    // styling for \"On Campus Walk-In Hours\"\n    tgtFmt = worksheet.getRangeByIndexes(breaks[i],1,1,1).getFormat();\n    tgtFmt.getFill().setColor(middleColor);\n    tgtFmt.getFont().setBold(true);\n    tgtFmt.getFont().setSize(18);\n    tgtFmt.getFont().setName(\"Times New Roman\");\n\n    // styling for day labels\n    tgtFmt = worksheet.getRangeByIndexes(breaks[i]+1, 1, 1, 6).getFormat();\n    tgtFmt.getFill().setColor(middleColor);\n    tgtFmt.getFont().setName(\"Times New Roman\");\n\n    // styling for remote session link labels (2 rows)\n    tgtFmt = worksheet.getRangeByIndexes(breaks[i],7, 2, 1).getFormat();\n    tgtFmt.getFill().setColor(rightColor);\n    tgtFmt.getFont().setName(\"Times New Roman\");\n    tgtFmt.setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);\n\n    // styling for \"Remote Session Links\"\n    tgtFmt = worksheet.getRangeByIndexes(breaks[i],7,1,1).getFormat();\n    tgtFmt.getFont().setSize(18);\n    tgtFmt.getFont().setBold(true);\n  }\n}\n\n// provides formatting settings for output spreadsheet, including data formats.\n// Should be called before data is placed in spreadhseet \nfunction format(targetSheet : ExcelScript.Worksheet){\n  // set first seven columns to \"text\" format\n  targetSheet.getRange(\"A:G\").setNumberFormatLocal(\"@\"); \n\n  // set last column to \"general\" format so links will be interpreted\n  targetSheet.getRange(\"H:H\").setNumberFormatLocal(\"general\"); // bookings link\n}\n\nfunction addHeader(targetSheet : ExcelScript.Worksheet){\n  // variables used to reduce calls to sheet \n  let tgtRange : ExcelScript.Range;\n  let tgtFormat : ExcelScript.RangeFormat;\n  let tgtFont : ExcelScript.RangeFont;\n\n  // insert two new rows at the top of the worksheet \n  tgtRange = targetSheet.getRange(\"1:2\").insert(ExcelScript.InsertShiftDirection.down);\n  \n  // apply layout and styling settings to the first row\n  tgtRange = targetSheet.getRange(\"A1:H1\");\n  tgtRange.merge();\n  tgtRange.setValue(\"Learning Center Schedule by Courses - [SEMESTER HERE]\\nlearningcenter@harford.edu\\n443-412-2588\");\n  tgtFormat = tgtRange.getFormat();\n  tgtFont = tgtFormat.getFont();\n  tgtFont.setSize(24);\n  tgtFont.setBold(true);\n  tgtFont.setName(\"Times New Roman\");\n  tgtFont.setColor(\"FFFFFF\");\n  tgtFormat.getFill().setColor(topBannerColor);\n  tgtFormat.setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);\n  tgtFormat.setVerticalAlignment(ExcelScript.VerticalAlignment.center);\n  tgtFormat.setRowHeight(100);\n\n  // apply layout and styling settings for second row left box \n  tgtRange = targetSheet.getRange(\"A2:A2\");\n  tgtRange.setValue(\"Scroll Down to Find The Course You Need\\nAssistance With\");\n  tgtFormat = tgtRange.getFormat();\n  tgtFont = tgtFormat.getFont();\n  tgtFont.setSize(16);\n  tgtFont.setName(\"Times New Roman\");\n  tgtFormat.getFill().setColor(leftColor);\n  tgtFormat.setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);\n  tgtFormat.setVerticalAlignment(ExcelScript.VerticalAlignment.center);\n  tgtFormat.setRowHeight(100);\n\n  // apply layout and styling settings for second row middle box\n  tgtRange = targetSheet.getRange(\"B2:G2\");\n  tgtRange.merge();\n  tgtRange.setValue(\"For in person assistance, view walk-in hours for the Learning Center\\n(Located in Library 115)\");\n  tgtFormat = tgtRange.getFormat();\n  tgtFont = tgtFormat.getFont();\n  tgtFont.setSize(16);\n  tgtFont.setName(\"Times New Roman\");\n  tgtFormat.getFill().setColor(middleColor);\n  tgtFormat.setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);\n  tgtFormat.setVerticalAlignment(ExcelScript.VerticalAlignment.center);\n\n  // apply layout and styling settings for second row right box \n  tgtRange = targetSheet.getRange(\"H2:H2\");\n  tgtRange.merge();\n  tgtRange.setValue(\"For remote assistance, book a Microsoft Teams appointment by clicking on a link below\");\n  tgtFormat = tgtRange.getFormat();\n  tgtFont = tgtFormat.getFont();\n  tgtFont.setSize(16);\n  tgtFont.setName(\"Times New Roman\");\n  tgtFormat.getFill().setColor(rightColor);\n  tgtFormat.setHorizontalAlignment(ExcelScript.HorizontalAlignment.center);\n  tgtFormat.setVerticalAlignment(ExcelScript.VerticalAlignment.center);\n  tgtFormat.setWrapText(true);\n\n\n}\n\nfunction addAllBorders(tgtRange : ExcelScript.Range){\n  // set borders for all cells\n  let tgtFmt = tgtRange.getFormat();\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.insideHorizontal).setColor(\"000000\");\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.insideHorizontal).setWeight(ExcelScript.BorderWeight.thin);\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.insideVertical).setStyle(ExcelScript.BorderLineStyle.continuous);\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.insideVertical).setColor(\"000000\");\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.insideVertical).setWeight(ExcelScript.BorderWeight.thin);\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.edgeBottom).setStyle(ExcelScript.BorderLineStyle.continuous);\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.edgeBottom).setColor(\"000000\");\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.edgeBottom).setWeight(ExcelScript.BorderWeight.thin);\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.edgeTop).setStyle(ExcelScript.BorderLineStyle.continuous);\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.edgeTop).setColor(\"000000\");\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.edgeTop).setWeight(ExcelScript.BorderWeight.thin);\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.edgeLeft).setStyle(ExcelScript.BorderLineStyle.continuous);\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.edgeLeft).setColor(\"000000\");\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.edgeLeft).setWeight(ExcelScript.BorderWeight.thin);\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.edgeRight).setStyle(ExcelScript.BorderLineStyle.continuous);\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.edgeRight).setColor(\"000000\");\n  tgtFmt.getRangeBorder(ExcelScript.BorderIndex.edgeRight).setWeight(ExcelScript.BorderWeight.thin);\n}\n\nfunction findGaps(content : string[][]){\n  let gaps : number[] = [];\n  for(let i = 0; i < content.length; i++){\n    if(content[i][0] == \"\"){\n      gaps.push(i);\n    }\n  }\n  return gaps;\n}\n\nfunction findUnscheduled(content : string[][]){\n  let unscheduledRows : number[] = [];\n  for(let i = 0; i < content.length; i++){\n    if (content[i][0] != \"\" && content[i][1] == \"\" && content[i][2] == \"\" && content[i][3] == \"\" && content[i][4] == \"\" && content[i][5] == \"\" && content[i][6] == \"\"){\n      unscheduledRows.push(i);\n    }\n  }\n  return unscheduledRows;\n}\n\nfunction main(workbook : ExcelScript.Workbook) {\n\n  let groupTables = workbook.getWorksheet(\"Owlnet Course Groups\").getTables();\n  let groupXlTables = makeXlTables(groupTables);\n  let assistants = buildLearningAssistantsFromWorkbook(workbook.getWorksheet(\"Automate Schedule\"));\n  let courses = buildCourses(workbook.getWorksheet(\"Courses transpose\"), assistants, groupXlTables);\n\n  OwlnetSchedule.transposeOmissions(courses, groupXlTables);\n  OwlnetSchedule.assignBookingsLinks(courses, groupXlTables);\n  let outputArry = OwlnetSchedule.output(courses, groupXlTables);\n  output(outputArry, \"Owlnet Source\",workbook).activate();\nconsole.log(assistants);\n}","description":"Creates a new copy of the owlnet schedule by courses based on current learning assistant schedule, coverage indicated in transpose sheet, and course grouping/order in Owlnet Course Groups","parameterInfo":"{\"originalParameterOrder\":[],\"parameterSchema\":{\"type\":\"object\",\"default\":{},\"x-ms-visibility\":\"internal\"},\"returnSchema\":{\"type\":\"object\",\"properties\":{}}}","apiInfo":"{\"variant\":\"synchronous\",\"variantVersion\":2}"}